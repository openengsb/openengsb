<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter version="5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd   http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd   http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd"
  xml:id="user.persistence" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Persistence in the OpenEngSB</title>

  <para>The OpenEngSB contains various different persistence solutions which should be introduced and explained in this chapter</para>

  <section>
    <title>Core Persistence</title>
    <para>The OpenEngSB has a central persistence service, which can be used by any component within in the OpenEngSB to
      store data. The service is designed for flexibility and usability for the storage of relatively small amounts of
      data with no explicit performance requirements. If special persistence features need to be used it is recommended to
      use a specialized storage rather than the general storage mechanism.</para>

    <para>The persistence service can store any Java Object, but was specifically designed for Java Beans.</para>

    <para>
      The interface of the
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/PersistenceService.java">persistence service</link>
      supports basic CRUD (create, update, retrieve, delete) mechanisms. Instances of the persistence service are created
      per bundle and have to make sure that data is stored persistently. If bundles need to share data the common
      persistence service cannot be used, as it does not support this feature. The 
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/PersistenceManager.java">persistence manager</link>
      is responsible for the management of persistence service instances per bundle. On the first request from a
      bundle the persistence manager creates a persistence service. All later requests from a specific bundle should
      get the exact same instance of the persistence service.
    </para>

    <para>
      Queries with the OpenEngSB persistence done via the 
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/PersistenceService.java">persistence service</link>.
      Behind this service an easy query-by-example logic is used to retrieve your results. In some cases the comparision and storage can create some
      wired problems for your specific use cases. For those cases the 
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/IgnoreInQueries.java">IgnoreInQueries</link> annotation had
      been added. Using this annotation on getters in classes persisted via the
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/PersistenceService.java">persistence service</link>
      querying them ignores those fields during trying to compare them to stored data.
    </para> 

    <para>
      The persistence solution of the OpenEngSB was designed to support different possible back-end database systems.
      So if a project has high performance or security requirements, which can not be fulfilled with the default database
      system used by the persistence service, it is possible to implement a different persistence back-end. To make this
      exchange easier a  <link xlink:href="${github}/core/persistence/src/test/java/org/openengsb/core/persistence/PersistenceServiceTest.java">test</link>
      for the expected behavior of the persistence service is provided.
    </para>
  </section>

  <section>
    <title>Configuration Persistence</title>
    <para>Besides the centralized Java Bean store the OpenEngSB also have a more specialized solution to store configurations. Configurations are
      basically also Java Beans, but have to extend a 
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/model/ConfigItem.java">ConfigItem</link>. Well, since Configurations
      are also only Java Beans you may ask: Why not simply store them via the 
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/PersistenceService.java">persistence service</link>? The
      reason is quite simple. We do need to store configurations at various places. Options may be the file system, an object store or any other place.
      In addition configurations, when you e.g. store them to files, have to be quite specific about their types. Rule, for example, have to be stored
      as simple strings, flows as xml files and connectors as key-value-pairs. Beeing so specific the implementations of the backends also have to be
      specific. Besides, there are kind of regions. Examples are Rules, Flows, and various others. Bascially in you code you simply want to ask for
      a configuration persister for rules and do not care if it is a file persister or something else. In addition rules could be persisted somewhere
      else than e.g. flows. Therefore those backends have to be configured separate for each type.
    </para>

    <para>Ok, after the need is identified let's take a look at the how. Basically it's quite simple. You register various backend services in the OSGi
      registry, give them a specific ID, configure how a region is mapped to an idea and request a persister for a specific region or type and retrieve
      the correct implementation. From a user point of view this system is quite simple. Use the getConfigPersistenceService(String type) method from the
      <link xlink:href="${github}/core/common/src/main/java/org/openengsb/core/common/OpenEngSBCoreServices.java">OpenEngSBCoreServices</link> class with the
      type, which is typically stored directly at the configurations, as for example for the
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/model/RuleConfiguration.java">RuleConfiguration</link> and retrieve and persist
      RuleConfigurations. The mapping between the backend and the frontend is defined in the configuration file
      <link xlink:href="${github}/assembly/src/main/filtered-resources/etc/org.openengsb.persistence.config-rule.cfg">here</link>. If you want to use another
      available and compatible backend for rule configurations add the backend id in the configuration file and the service for this region will switch
      automatically.
    </para>

    <para>Although it is quite simple to configure, change and consume and provide provide configurations it is mostly not a good idea to simply change
      the properties, backend or frontend if you're not exactly sure about what you're doing. You can easily take the wrong backend service which will not
      be able to persist e.g. a RuleConfiguration and throws exceptions. If you swtich the backend during the run everything stored in the old backend would
      not be avialable in the new one. Within a client project mostly relay on using those services to read the properties and use the OpenEngSB to store them.
    </para>

    <para>Still the system can easily be extended to your own use. Typically you have to do the following steps to provide a new configuration service. First
      of all start by providing an own Configuration which extends
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/model/ConfigItem.java">ConfigItem</link>. Please only use the metadata and content
      fields and do not add additional variables. They wont get stored. Now add a configuration file into etc with 
      org.openengsb.persistence.config-ANY_NAME_YOU_LIKE.cfg. In this file define the region and the backend id. The exact values and detailed explanation for
      those fields is available
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/Constants.java">here</link>. If you've not choosen one of the general
      available services for storage you now can implement your own backend service registered in the OSGi registry with the ID you've configured in the .cfg 
      file before. The interface you have to implement and register as a service is the 
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/persistence/ConfigPersistenceBackendService.java">ConfigPersistenceBackendService</link>.
    </para>

    <section>
      <title>Context configuration persistence</title>
      <para>The context configuration persistence follows the basic congiguation persistence scheme. In this case the backend 
        (<link xlink:href="${github}/core/services/src/main/java/org/openengsb/core/services/internal/ContextFilePersistenceService.java">ContextFilePersistenceService</link>)
        creates files for each context (basically empty files with filename &lt;contextId&gt;.context), the context service
        (<link xlink:href="${github}/core/services/src/main/java/org/openengsb/core/services/internal/ContextServiceImpl.java">ContexServiceImpl</link>)
        requests a config persistcene service of type CONTEXT, is given the aforementioned one and uses it to persist its data.
      </para>
    </section>
  </section>

</chapter>


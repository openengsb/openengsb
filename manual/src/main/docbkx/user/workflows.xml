<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd   http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd   http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd"
         xml:id="user.workflows" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Workflows</title>

  <para>The OpenEngSB supports the modeling of workflows. This could be done
  by two different approaches. First of all a rule-based event approach, by
  defining actions based on events (and their content) which were thrown in
  or to the bus. Events are practical for "short-time handling" since they are
  also easy to replace and extend. For long running business processes the
  secondary workflow method could be used which is based on <xref linkend="workflows.processes" />
  described in Drools-Flow.</para>

  <para>The workflow service takes "events" as input and handles them using a
  rulebased system (JBoss Drools). It provides methods to manage the
  rules.</para>

  <para>The workflow component consists of two main parts: The RuleManager and
  the WorkflowService. </para>
  <section>
    <title>Workflow service</title>

    <para>The
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/workflow/WorkflowService.java">workflow service</link>
    is responsible for processing events, and makes sure the rulebase is
    connected to the environment (domains and connectors). When an event is
    fired, the workflow-service spawns a new session of the rulebase. The
    session gets populated with references to domain-services and other
    helper-objects in form of global variables. A drools-session is running
    in a sandbox. This means that the supplied globals are the only way of
    triggering actions outside the rule-session.
    </para>
  </section>
  <section>
    <title>Rulemanager</title>
    <para>The <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/workflow/RuleManager.java">rule manager</link>
    provides methods for modifying the rulebase. As opposed to plain drl-files,
    the rulemanager organized the elements of the rulebase in its own manner.
    Rules, Functions and flows are saved separately. All elements share a common
    collection of import- and global-declarations. These parts are sticked together
    by the rulemanager, to a consistent rulebase. So when adding a new rule or
    function to the rulebase, make sure that all imports are present before.
    Otherwise the adding of the elements will fail. </para>
  </section>

  <section xml:id="workflows.processes">
    <title>Processes</title>
    <para>In addition to processing Events in global/context-specific rules, it
    is also possible to use them to control a predefined workflow. The
    WorkflowService provides methods for starting and controlling
    workflow-processes.</para>

    <para>When the workflow service receives an event, it is inserted into the
    rulebase as a new fact (and rules are fired accordingly). In addition the
    event is "signaled" to every active workflow-process. Workflow logic may
    use specific rules to filter these events.</para>
  </section>
</chapter>


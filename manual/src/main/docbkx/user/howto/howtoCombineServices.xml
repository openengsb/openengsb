<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="howto.composite" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>HowTo - Combine multiple connectors</title>
  <para>It is possible to combine several connector-instances to one parent connector that appears to workflows like
    any other connector. For example you may want to have several notification-connectors in a workflow. It uses the
    location-placeholder "foo". So when the workflow expects the connector-instance at location "foo", you may want it
    to call multiple connectors. One would expect that simply assigning the location "foo" to every connector would
    create this behaviour, but it doesn't. By default, the connector with the highest service ranking is chosen (see
    OSGi-core-specification section 5.5.5).</para>

  <section xml:id="howto.composite.strategy">
    <title>Composite strategies</title>
    <para>There are also other issues with using multiple service in a place where one single service is expected:
      <itemizedlist>
        <listitem>Should the services be called concurrently or sequentially?</listitem>
        <listitem>Which service should be called first?</listitem>
        <listitem>What should be returned as a result?</listitem>
      </itemizedlist>
      All this is specified by a CompositeStrategy. Strategy-implementations must implement the
      CompositeConnectorStrategy interface and be registered as OSGi-services exporting this interface. Also the service
      must specify the "composite.strategy.name" property.
      The strategy is provided with a list of ServiceReferences, and the invocation parameters.
      The implementation can decide which services to resolve and to invoke.
      Also the strategy must return a single result.
    </para>
  </section>
  <section xml:id="howto.composite.connector">
    <title>Create a composite connector</title>
    <para>A composite connector instance can be created like a regular connector-instance. You need to supply the
        following attributes:
      <itemizedlist>
        <listitem>querystring: a string representing an OSGi-query. All services that match this query are passed on
            to the strategy as ServiceReferences.
            Example: Suppose we have two notification services. One has the property
            <code>location.foo=notification/1</code> and the other one has <code>location.foo=notification/2</code>.
                A possible query-string for the composite-service could be <code>(location.foo=notification/*)</code>.
          </listitem>
        <listitem>composite-strategy-name: The name of the strategy that should be used.</listitem>
      </itemizedlist>
    </para>
  </section>
</chapter>

<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="user.quickstart" version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
    http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
    http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

    <title>Quickstart</title>

    <para>As a developer you have basically two ways in which you can use the OpenEngSB. One option is to use the OpenEngSB as a
      runtime environment for any project. In addition you've the possibility to write Plug-Ins (Domains, Connectors, ...) for 
      the OpenEngSB. Both cases are explained in this chapter.</para>

    <section>
        <title>Writing new projects using the OpenEngSB</title>
        <para>TBW</para>
    </section>

    <section>
        <title>Writing Domains for the OpenEngSB</title>
        <para>To create a new Domain run <emphasis>mvn openengsb:genDomain</emphasis>
        (or use <filename>../etc/scripts/gen-domain.sh</filename>)
        in the <filename>domain</filename> folder.
        You will be asked for the name of your domain. Enter the domain name starting with a lower case letter.
        For the other questions valid defaults are given.
        </para>
        <para>The new domain project will be added as a submodule. You eventually want to run <emphasis>mvn openengsb:eclipse</emphasis> and import the new project in eclipse.</para>
        <para>
        Add the methods your domain supplies to the domain interface.
        If your domain raises any events add methods like<programlisting>void raiseEvent(YourEvent event);</programlisting> (your event class subtype of Event as single parameter) to the events interface.
        </para>
    </section>

    <section xml:id="user.quickstart.connectors">
        <title>Writing Connectors for the OpenEngSB</title>
        <para>To create a new Connector run <emphasis>mvn openengsb:genConnector</emphasis>
        (or use <filename>../etc/scripts/gen-connector.sh</filename>) in the <filename>connector</filename> folder.
        You will be asked for the name of the domain you want to implement. Enter the domain name starting with a lower case letter.
        You may adapt the name of the implemented domain interface if you it does not match the naming convention.
        Supply the name of the connector staring with a lower case letter.
        </para>
        <para>The new domain project will be added as a submodule. You eventually want to run <emphasis>mvn openengsb:eclipse</emphasis> and import the new project in eclipse.</para>
		<para>Implement the domain interface in the supplied class (unfortunately no method stubs are generated).</para>
        <para>Unimplemented domain methods should always throw an exception rather than return default value or do nothing.
            Therefore each domain method without body must throw DomainMethodNotImplementedException to indicate that requested domain functionality is not implemented.      
           <programlisting>
<![CDATA[@Override
public void foo() {
	throw new DomainMethodNotImplementedException();
}]]>
          </programlisting>         
        </para>
        <para>The <emphasis>ServiceFactory</emphasis> has to supply a <emphasis>ServiceDescriptor</emphasis> that contains all attributes needed to instantiate the Connector.
        In the methods <emphasis>createServiceInstance</emphasis> and <emphasis>updateServiceInstance</emphasis> use the provided attributes to create a new new instance or update your Connector. The methods <emphasis>updateValidation</emphasis> and <emphasis>createValidation</emphasis> should do the same but try to validate the provided attributes first and return a validation result.
        </para>
        <para>The generated ServiceManager usually does not have to be changed.</para>
    </section>

</chapter>


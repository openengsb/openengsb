<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="user.context" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>Context Management</title>

  <para>The context is one of the most important core concepts of the OpenEngSB. It allows to reuse predefined
    workflows in several contexts. A context may often represent a project or subproject. So it is possible to execute
    the same workflow with the project-specific tool-instances and other metadata (like contact-information).</para>

  <para>To determine in which context an action should be executed a thread-local variable is used. The
    <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/context/ContextHolder.java">
      ContextHolder
    </link>
    keeps track of this variable (the current threads' context). Invoking the set- and get-method will always
    manipulate the context of the current Thread. When a new Thread is spawned it inherits the context from the
    parent thread.
  </para>

  <para><emphasis>Attention:</emphasis> When using Theadpools, the ContextHolder may malfunction
    (i.e. return the context of some previous task that was run in the same thread). Use
    <programlisting>ThreadLocalUtil.contextAwareExecutor(ExecutorService)</programlisting> to convert any executor to a
    context-aware one. ExecutorServices returned by this method ensure that the submitted tasks are executed in the
    same context as the thread they were submitted from.
  </para>

  <para>
   This way connector-implementations and other client projects always can handle actions according to the current
   context, and execute actions in specific a specific context. So when a person with a certain role in the project
   (e.g. project manager) needs to be notified of some event, the value of his contact-address is specific to the
   context of the project(s) he is managing.
  </para>

  <section xml:id="user.context.wiring">
    <title>Wiring services</title>

    <para>The context is also used to handle the wiring of services in workflows. Suppose there are two projects that
      use their own SCM-repositories and for both repositories connector-instances were created to poll them. When
      executing a workflow contains an action that polls the SCM, the correct service ca be picked by looking up the
      current thread's context.</para>

    <para>In general workflows have references to several domains and other services which they interact with during
      execution. Each project might have their own tools behind these domains, so these references must be resolved
      at runtime depending on the current context.</para>

    <para>For this to work the workflow-engine declares global variables that are used in rules and processes. A variable is resolved by
      looking up the service with the same name in the current context. If no service with that name is available in
      the context it is looked up in the "root"-context.</para>

    <para>In detail the wiring is handled via the service-properties. Services contain properties where the key is of
      the format "location.&lt;contextid&gt;". The value is a list of "locations" represented by an array of strings.
      So a service may have several locations in several contexts.</para>

    <para>When a global variable is accessed during the execution of an action (from a process or rule), the
      OSGi-context is queried for the corresponding service. The service wired to this variable must have location
      with the same name as the variable. The service is searched in the current context and the root-context. If no
      service is found, the action is stalled for 30 seconds. If there is still no service found an Exception is thrown.
      Internally this is handled using proxies. When the workflow service is started, all globals are populated with
      proxies, that automatically resolve the service with the corresponding location when a method is invoked.</para>

    <para>Example: The auditing-service is registered with the interface AuditingDomain. The service has property
      "location.root" with value {"auditing"} (array with one element). The workflow engine contains a global named
      "auditing" and a rule that invokes a method on every Event that is processed. When the rule fires and the
      consequence is executed, the proxy representing "auditing"-global queries for a service with the
      location.currentContext or the location.root containing a location-entry "auditing". Since root-services get a
      service-ranking of "-1" by default, the service current context's would supersede the service located in the
      root-context.</para>
  </section>
</chapter>


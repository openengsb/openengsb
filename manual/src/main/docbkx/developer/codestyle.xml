<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="codestyle" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>Java Coding Style</title>

  <section>
    <title>Sun Coding Guidelines</title>
    <para>The OpenEngSB Coding Guidelines are based upon the <link
        xlink:href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Code Conventions for the Java
        Programming Language</link>. There are some additions and deviations for this project.</para>
    <section>
      <title>Line length</title>
      <para>A line length of 80 was standard 10 years ago, but with increasing screen size and resolution a length of
        120 is more reasonable.</para>
    </section>
    <section>
      <title>Wrapping</title>
      <para>Use the auto-formatter of your IDE. Import the <link
          xlink:href="http://dev.openengsb.org/resources/eclipse/formatter.xml">Eclipse Formatter file</link>.</para>
    </section>
    <section>
      <title>Number of declarations per line</title>
      <para> Only one declaration per line is allowed. </para>
    </section>
    <section>
      <title>Declaration placement</title>
      <para> Declare variables where they are needed. It's easier to read and restricts the scope of variables. Don't
        overshadow variables. </para>
    </section>
    <section>
      <title>Blank lines</title>
      <para> The body of a method should not start with a blank line. </para>
    </section>
  </section>

  <section>
    <title>General</title>
    <section>
      <title>File format</title>
      <para>Every Java file has to be UTF-8 encoded and has to use UNIX line endings. Indentations consist of four
        spaces, tab-stops are not allowed.</para>
    </section>
    <section>
      <title>Header</title>
      <para> Every source file has to start with this header:
        <programlisting>
<![CDATA[/**

  Licensed to the Austrian Association for Software Tool Integration (AASTI)
  under one or more contributor license agreements. See the NOTICE file
  distributed with this work for additional information regarding copyright
  ownership. The AASTI licenses this file to you under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

 */]]></programlisting>
      </para>
    </section>
    <section>
      <title>Duplication</title>
      <para>Code duplication has to be avoided at all costs.</para>
    </section>
    <section>
      <title>Use guards</title>
      <para> Guards are a possibility to reduce the amount of nesting. Heavily nested code is much harder to read. Bad:
        <programlisting>
<![CDATA[public void foo() {
    if (conditionA) {
        if (conditionB) {
            if (conditionC) {
                // do some work
            }
        } else {
            throw new MyException();
        }
    }
}]]></programlisting>
        Good:
        <programlisting>
<![CDATA[public void foo() {
    if (!conditionA) {
        return;
    }

    if (!conditionB) {
        throw new MyException();
    }

    if (!conditionC) {
        return;
    }

    // do some work
}]]></programlisting>
      </para>
    </section>
    <section>
      <title>Keep methods short</title>
      <para>Methods longer than 40 lines are candidates for refactoring. A method should only do one thing and has to be
        easily understandable. The number of arguments should be minimized. A method should only be at a single level of
        abstraction.</para>
    </section>
    <section>
      <title>Use enums</title>
      <para>Prefer typesafe enumerations over integer constants.</para>
    </section>
    <section>
      <title>Avoid use of static members</title>
      <para>Static members are a sign of a design error because they are like global variables. It's fine if you declare
        a constant as final abstract of course.</para>
    </section>
    <section>
      <title>Use fully qualified imports</title>
      <para>Don't import org.example.package.*, instead import the needed classes.</para>
    </section>
    <section>
      <title>Never declare implementation types</title>
      <para>Use interfaces or the abstract base class instead of concrete implementation classes where possible. Don't
        write: <programlisting><![CDATA[ArrayList<String> names = new ArrayList<String>();]]></programlisting> Instead
        use the interface name:
        <programlisting><![CDATA[List<String> names = new ArrayList<String>();]]></programlisting> This is especially
        important in method signatures. </para>
    </section>
    <section>
      <title>SerialVersionUID</title>
      <para> Don't declare serialVersionUID just because your IDE tells you. Have a good reason why you need it. This
        can cause bugs that are hard to detect. </para>
    </section>
    <section>
      <title>Restrict scope of suppressed warnings</title>
      <para> If you have to suppress a warning make sure you give it the smallest possible scope. This means you should
        never annotate a whole class with @SuppressWarnings. A method may be acceptable but you should try to annotate
        the problematic statements instead. </para>
    </section>
    <section>
      <title>Use String.format()</title>
      <para> Use String.format() instead of long concatenation chains which are hard to read. </para>
    </section>
    <section>
      <title>Array declaration style</title>
      <para> Always use <programlisting> Type[] arrayName;</programlisting> instead of the C-like
        <programlisting>Type arrayName[];</programlisting>
      </para>
    </section>
    <section>
      <title>Comments</title>
      <para> Don't make funny comments, be professional. All comments have to be in English. Comment what methods do,
        not how they do it. Do not comment what is already stated in code. </para>
    </section>
  </section>

  <section>
    <title>Naming</title>
    <section>
      <title>Interfaces</title>
      <para> Interfaces are not marked by starting their names with I. This exposes more information than necessary and
        is not Java-like. </para>
    </section>
    <section>
      <title>Don't abbreviate</title>
      <para> Do not use abbreviations if it's not a project wide standard. Long method names are preferable to
        inconsistency. With automatic code completion this isn't a problem anyway. </para>
    </section>
  </section>

  <section>
    <title>No clutter</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>Exception/Log Messages have to be concise. Don't end messages with "...".</para>
        </listitem>

        <listitem>
          <para>Don't overuse FINAL, use it where you have a good reason something has to be final. Although it doesn't
            hurt to declare everything as final it clutters the code.</para>
        </listitem>

        <listitem>
          <para>Don't use history tables in source files. Use the SCM system if you are interested in the changes of a
            file.</para>
        </listitem>

        <listitem>
          <para>Don't use the JavaDoc author tag. Also use the SCM system.</para>
        </listitem>

        <listitem>
          <para>Don't declare unnecessary constructors, especially the empty default constructor.</para>
        </listitem>

        <listitem>
          <para>Don't make implicit calls explicitly, i.e. calling super(); in every constructor.</para>
        </listitem>

        <listitem>
          <para>Don't specify modifiers that are implicit, i.e. don't make methods in interfaces <code>public
              abstract</code>.</para>
        </listitem>

        <listitem>
          <para>Don't initialize fields with null, they are automatically initialized with null.</para>
        </listitem>

        <listitem>
          <para>Don't use banners in comments.</para>
        </listitem>

        <listitem>
          <para>Don't use closing brace comments, i.e. } // end if, they are a sign of too long methods.</para>
        </listitem>

        <listitem>
          <para>Don't comment out code and commit it. This confuses programmers why it is there. Simply delete it, it's
            still present in the SCM history.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section>
    <title>Exception Handling</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>Don't log and throw. Either a exception should be logged or thrown to be processed at a more appropriate
            place.</para>
        </listitem>

        <listitem>
          <para>Don't swallow exceptions silently. If you have to do it, you have to make a comment stating the
            reason.</para>
        </listitem>

        <listitem>
          <para>Use runtime exceptions where possible.</para>
        </listitem>

        <listitem>
          <para>Wrap exceptions in a RuntimeException if you don't want to specify the Exception in your method
            signature and you can't handle it.</para>
        </listitem>

        <listitem>
          <para>Write meaningful exception message.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section>
    <title>Tests</title>
    <section>
      <title>General</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>Make use of JUnit 4 features, e.g. @Test(expected = SomeException.class)</para>
          </listitem>

          <listitem>
            <para>Tests should not output anything. They have to be automatically verified.</para>
          </listitem>

          <listitem>
            <para>Don't catch exceptions just to fail manually. Declare the method to throw the exception.</para>
          </listitem>

          <listitem>
            <para>Install a shutdown hook for test data files. This assures that they will be deleted and the project
              remains in a clean state.</para>
          </listitem>

          <listitem>
            <para>Use <link xlink:href="http://code.google.com/p/mockito/">Mockito</link> for mocking.</para>
          </listitem>

          <listitem>
            <para>Tests should have descriptive method names. It should be deducible what will be tested. Bad:
                <code>testError()</code>. Good: <code>invalidInMessage_ShouldReturnErrorResponse()</code>.</para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section>
      <title>Naming Scheme</title>
      <para> The Maven profiles for running the tests are configured to filter based on the naming of the test class.
        The package layout is just a further convenience for the developer for running the tests manually. <itemizedlist>
          <listitem>
            <para>Unit Tests test one class/method/feature in isolation from their dependencies by using test doubles as
              replacement. They should be fast and need no special environment setup for execution.</para>
          </listitem>

          <listitem>
            <para>Filenames end with Test.java</para>
          </listitem>

          <listitem>
            <para>Located in the normal package structure, i.e.
              <code>outer.project.package.inner.project.package</code></para>
          </listitem>

          <listitem>
            <para>Integration Tests combine individual software modules to test their interaction with each other. They
              do not need a special environment setup for execution.</para>
          </listitem>

          <listitem>
            <para>Filenames end with IT.java</para>
          </listitem>
          <listitem>
            <para>Located in <code>outer.project.package.it.inner.project.package</code></para>
          </listitem>

          <listitem>
            <para>User Tests need a special execution environment and thus are not run automatically during any maven
              phase.</para>
          </listitem>

          <listitem>
            <para>Filenames end with UT.java</para>
          </listitem>
          <listitem>
            <para>Located in <code>outer.project.package.ut.inner.project.package</code></para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>

  <section>
    <title>XML Formatting</title>
    <section>
      <title>File Format</title>
      <para>Every XML file has to be UTF-8 encoded and has to use UNIX line endings. Indentations consist of TWO spaces,
        tabstops are not allowed. The line length shouldn't exceed 120 characters.</para>
    </section>
    <section>
      <title>Eclipse Settings</title>
      <para>If you use Eclipse please choose these settings for your OpenEngSB workspace: <mediaobject>
          <alt>Eclipse XML Settings Dialog</alt>
          <imageobject>
            <imagedata fileref="graphics/eclipse-xml-settings.png" format="png" width="400" align="center"/>
          </imageobject>
          <caption><para>Eclipse XML Settings</para></caption>
        </mediaobject>
      </para>
    </section>
    <section>
      <title>Recommended Readings</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>Clean Code, Robert C. Martin, 2008</para>
          </listitem>
          <listitem>
            <para>Effective Java Second Edition, Joshua Bloch, 2008</para>
          </listitem>
          <listitem>
            <para>
              <link xlink:href="http://www.garshol.priv.no/blog/105.html">7 tips on writing clean code</link>
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>

</chapter>

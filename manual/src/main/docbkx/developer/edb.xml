<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
-->

<chapter xml:id="developer.edb" version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
    http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
    http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">
    
    <title>Engineering Database - EDB</title>
    
    <para>
        The EDB is a core component of the semantic part of the OpenEngSB. It's purpose is the persisting
        and versioning of domain models (so called OpenEngSBModel objects).
    </para>
    
    <section>
        <title>Motivation</title>
        <para>
            The EDB concept was introduced with the idea to build a central persisting unit for all domain
            models of all domains. This central approach offers some interesting advantages, like the central
            management of the versioning possibility and a single point where, in the future, model 
            transformations can be done before models are returned to the user. This model transformation 
            topic is on of the points, the EKB has to take care of, which is strong corelated to the EDB.
        </para>
        <para>
            Another big feature the EDB brings is a build-in conflict checker. Whenever someone tries to
            save something into the EDB with the wrong version, the conflict checker tells the user that
            a conflict has been found and that he has to checkout the newest version of the model before
            he can save the model.
        </para>
    </section>
    <section>
        <title>Structure</title>
        <para>
            The EDB is an openJPA based implementation of a central database supplier in a service orientated
            architecture which also have the additional functionality to versionize data which is saved into
            the EDB if desired.
        </para>
        <para>
            Since the EDB simulates the functionality of a scm system, the structure of the tables in the EDB 
            is no big surprise. They consist of objects which have a list of key/value pairs bound to them. 
            Also there exist a commit table, where you can check which user in which context have done which 
            changes to the EDB.
        </para>
    </section>
    <section>
        <title>Usage</title>
        <para>
            Until now, the saving/updating of models into/in the EDB is done through specific events which every
            connector which implements the interface "OpenEngSBConnectorService" can throw. This events hide 
            many details of the saving procedure like the automatically load from where the event is coming
            and with this, an automatic event enhancement. Also the conflict check is started through such an event.
            In future the EDB has to be used directly without events to easier enable the possibility to use the EDB 
            functionality in workflows.
        </para>
        <para>
            The loading of models from the EDB is in principle possible, but should always be done through the QueryService
            of the EKB bundle, since this service does the automatic transformation work of elements from the EDB to an
            OpenEngSBModel. See the detailed explanation of the EKB for more informations.
        </para>
    </section>
    <section>
        <title>Conflict Detection</title>
        <para>
            The conflict detection, as it is implemented now, is a very simple implementation of a conflict checker. The
            checker is based on simple version numbers. If the version number of the model which has to be saved doesn't
            fit to the actual version number, the conflict detection throws an error.
        </para>
        <para>
            In the future there should be more possibilities for conflict detections been found. But for the start, this
            conflict detection is enough.
        </para>
    </section>
    
</chapter>

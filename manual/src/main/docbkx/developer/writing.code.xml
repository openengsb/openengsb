<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="writing.code" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>Writing Code</title>

  <para>This chapter is intended for developers. There are no special prerequisites. Each part describes what a
    developer has to look at in specific for the OpenEngSB.</para>

  <section>
    <title>Maven POM files in the OpenEngSB</title>
    <para>Following the guidelines of Maven Central, how a pom should be designed it is required to add the 
      following tags into every and each pom file:</para>
    <itemizedlist>
      <listitem>modelVersion</listitem>
      <listitem>groupId</listitem>
      <listitem>artifactId</listitem>
      <listitem>version</listitem>
      <listitem>packaging</listitem>
      <listitem>name</listitem>
      <listitem>description</listitem>
      <listitem>url</listitem>
      <listitem>licenses</listitem>
      <listitem>scm/url</listitem>
      <listitem>scm/connection</listitem>
      <listitem>scm/developerConnection</listitem>
    </itemizedlist>
    <para>The following listings shows an example of these params for a typical OpenEngSB pom.</para>
    <programlisting><![CDATA[<modelVersion>4.0.0</modelVersion>
      <groupId>org.openengsb.core</groupId>
      <artifactId>openengsb-core-parent</artifactId>
      <version>1.1.0-SNAPSHOT</version>
      <name>OpenEngSB :: Core :: Parent</name>
      <packaging>pom</packaging>
      <description>Parent project for all OpenEngSB Core classes</description>
      <url>http://www.openengsb.org</url>
      <licenses>
        <license>
          <name>Apache 2</name>
          <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
          <distribution>repo</distribution>
        </license>
      </licenses>
      <scm>
        <connection>scm:git:git://github.com/openengsb/openengsb.git</connection>
        <developerConnection>scm:git:git@github.com:openengsb/openengsb.git</developerConnection>
        <url>http://github.com/openengsb/openengsb</url>
    </scm>]]></programlisting>
  </section>
  <section>
    <title>Making UI Tests Localizable</title>
    <para>
      If you want to test if specific text is shown in the UI extend LocalisedTest in your UI Test. The
      constructor automatically loads the correct ResourceBundle and via localization(String resourcename) you
      can load a localized version of a specific resource string. The default locale is used as to match the locale
      used by WicketTester.
    </para>
  </section>
  <section>
       <title>How to write tests</title>
       <para>The following listings show how to write tests according to the OpenEngSB coding style</para>
       <section>The name of the test method has to describe what is going to be tested. After the "_"
         is described what are the expected results.
<programlisting>
@Test
public void testBehaviorX_shouldReturnY() {
  //CODE
}
      </programlisting>
In addition to the normal behaviour the coder should also provide a test for the failure behavior.
      <programlisting>
@Test(expected = BehaviorException.class)
public void testBehaviorX_shouldThrowException() {
//CODE
}
</programlisting>
       </section>
       <section>
         <title>Technologies for writing test, and how to use them</title>
         <para>The OpenEngSB developers decided to use following testing tools:</para>
         <caution>Instead of using Assert.assertThat(....) or Mockito.mock(...) we use the static import variant:
           assertThat(...) and mock(...)</caution>
         <itemizedlist>
           <listitem>Asserts: We use  <link xlink:href="http://code.google.com/p/hamcrest/wiki/Tutorial">
             Hamcrest</link> instead of JUnit.
             A simple example how to use Hamcrest assertions is given in the following listing:
<programlisting>
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.MatcherAssert.is;
 [...]
 assertThat(realValue, is(expectedValue));
</programlisting>
           </listitem>
           <listitem>Mocking: We use <link xlink:href="http://code.google.com/p/mockito/">mockito</link>. A simple
             example how to use Mockito in a correct way is given in the following listing:
<programlisting>
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.times;
 [...]
 //mocking code
 ExampleMock exampleMock = mock(ExampleMock.class);
 when(exampleMock.methodX()).thenReturn(y);
 [...] //testing code
 //verification
 verify(manager, times(1).methodX(Y);
</programlisting>
           </listitem>
         </itemizedlist>
       </section>
     </section>
</chapter>


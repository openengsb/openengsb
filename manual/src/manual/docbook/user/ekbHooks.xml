<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="contributor.ekbHooks" version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
    http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
    http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

    <title>EKB Hooks</title>

    <para>
        The EKB is the semantic core component of the OpenEngSB project (see the semantic chapter of this manual). 
        This section introduces the EKB hooks concept. Hooks can be used to dynamically influence the EKB commit procedure.
    </para>

    <section>
        <title>Motivation</title>
        <para>
            One of the main usage of the EKB is the communication with the EDB, but differently to the EDB, the EKB works
            on model level. The EDB can only deal with EDBObjects which are converted models. The commit procedure
            of the EKB takes models, convert them to EDBObjects and send them to the EDB so that they can be persisted.
            Similar to the previously introduced EDB hooks, the EKB hooks can be used to influence the commit procedure 
            of the EKB. So far there are two hook types:
        </para>
        <itemizedlist>
            <listitem>EKBPreCommitHook</listitem>
            <listitem>EKBPostCommitHook</listitem>
        </itemizedlist>
        <para>
            They are realized as a dynamically created list of hook services which are queried in the EKB. More
            about this in the usage section. The two types get explained in more detail in the following sections. 
        </para>
    </section>
    <section>
        <title>EKBPreCommitHook</title>
        <para>
            The EKBPreCommitHook is called before the models are converted to EDBObjects and finally get sent to the
            EDB for persisting. Typically this hook type is used to adapt and modify the commit before they get 
            really committed.
        </para>
        <para>
            This hooks influence on the EDB commit procedure:
        </para>
        <itemizedlist>
            <listitem>Throws an EKBException: The exception aborts the commit procedure.</listitem>
            <listitem>Throws any other Exception: The excpetion gets caught, logged and ignored.</listitem>
        </itemizedlist>
    </section>
    <section>
        <title>EKBPostCommitHook</title>
        <para>
            The EKBPostCommitHook is called after the commit procedure is performed. Typically this hook is used
            to update some third library tools which need to know about specific commits.
        </para>
        <para>
            This hooks have no influence on the EKB commit procedure. But all exceptions which are thrown in such a hook,
            are caught, logged and ignored.
        </para>
    </section>
    <section>
        <title>Usage</title>
        <para>
            Each hook type is described as an java interface. To add a hook to the OpenEngSB environment, you have to implement
            a class implementing such an interface and provide this implementation as service of your bundle. This service does
            not need any special service properties, but it is no problem adding properties.
        </para>
        <para>
            The EKB persistence persist bundle have a dynamic list of each hook type which grows and shrinks whenever such 
            services are added or removed. The list of this hooks is then processed at the defined and already mentioned 
            places in the EKB commit procedure.
        </para>
    </section>
</chapter>


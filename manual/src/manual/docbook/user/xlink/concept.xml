<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
        
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
-->

<chapter version="5.0"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd   http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd   http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd"
    xml:id="xlink.concept" xmlns="http://docbook.org/ns/docbook"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:ns="http://docbook.org/ns/docbook">
    <title>The Concept of XLink</title>
    <para>This section introduces a concept to enable crossprogram linking in integrated frameworks,
        called XLink. It highlights the required precodintions, the components and the sequence of
        nessecary actions undertaken by the users to establish crossprogram linking. XLink supports
        actors who work on different, but semantically related, sets of data. In most cases this
        will occur during cooperations of actors from different disciplines. Now follows a general
        description of the concept together with further details concerning the implementation at
        the OpenEngSB framework, including some examples.</para>
    <section xml:id="concept.assumptions">
        <title>Preconditions and Assumptions</title>
        <para>The most basic assumption is, that data used during everyday work, is organized in
            projects and is therefore loosely semantically related. Every project may consist of a
            variety of artifacts with different content and datatypes. Actors from various
            disciplines are working together on different projects, everyone with their appropriate
            set of tools alias programs. A tool is connected to the OpenEngSB via a connector. It
            may offer different kinds of views on the data it is working on, but it serves a certain
            purpose. Tools which serve multiple purposes may have multiple connectors and are, in
            the following section, treated as a suite of standalone tools. Through this, it is
            assumed that tools work on data with a similar or related structure. An actor may hold
            the whole dataset of a project or just subset of it, for a graphical description see
                <link linkend="concept.graphic">here</link>.</para>
    </section>
    <section xml:id="xlink.concept.general">
        <title>General Concept</title>
        <para>Tools use <emphasis role="bold">models</emphasis> to manage their data, in OpenEngSB
            every defined model is part of a <link xlink:href="#architecture.concept.tooldomains"
                >Domain</link> (<emphasis role="bold">domainmodel</emphasis>). Tools implement those
            Domains and know the associated domainmodels, even though they don´t have to use them
            for their internal modelstructure. To enable linking across domainmodels, we have to add
            additional metadata to the domainmodels. We define the fields, of the domainmodels, that
            should help distinguishing linked objects from one another. The set of all identifying
            fields should make up an appropriate <emphasis role="bold">identifier</emphasis> and
            domains containing such models are now refered to as <emphasis role="bold"
                >Linkable</emphasis>. In this way, the distinguishing data between <emphasis
                role="bold">modelobjects</emphasis> (instances of a domainmodel), can be reduced to
            the set of fields that are semantically relevant. Note that we are only referring to
            instances from domainmodels, of the OpenEngSB, tools may use different models
            internally. The structure of an identifier also defines the precision in which points of
            interest in a Tool´s dataset can be addressed. The identifier of a modelobject may be
            related to one dataobject in the dataset of a tool or several datapoints a once. A link
            to a modelobject can now be established by its identifier. For the OpenEngSB framework,
            such link must also provide metadata information about <emphasis role="bold">Context,
                Model and Modelversion</emphasis>. The context referres to an OpenEngSB context and
            the model and version define the domainmodel, the identifier originates from.</para>
        <example>
            <title>An Example</title>
            <para><emphasis role="italic">A programmer is working on a project. Part of the
                    project´s data is java sourcecode. The programmer is working on the project with
                    a java sourcecode editor. The sourcecode editor implements a domain at the
                    OpenEngSB which contains a model called 'OOSourecodeMethod'. This model
                    describes an object-oriented method with it´s methodname, access modifier,
                    parameters, etc. As identifier we define the fields 'package', 'classname' and
                    'methodname''. In this example the other fields of the modelclass are not
                    relevant to distinguish a method. This identifier is unique for a method within
                    a java project but also within every other object-oriented project (with no
                    overloading). The viewed sourcecode is now splitted (semantically) into
                    modelobjects, each modelobject representing a single method within the
                    sourcecode. </emphasis></para>
            <para><emphasis role="italic">A different part of this project is it´s documentation.
                    This documentation contains an activity diagram. There may be strong semantic
                    realtions between some methods and some activities, for example when a method is
                    an impementation of a defined activity and has a similar name. With a activity
                    diagram viewing tool, that supports XLink and uses activities as modelobjects,
                    XLink is be able to transform between those domainmodels. This enables the tools
                    would to resolve those semantic relations and the programmer is able to jump
                    automatically between those corresponding datapoints.</emphasis></para>
        </example>
        <para>Every tool organizes data in its own way and may offer different views on it´s data,
            defined here as the <emphasis role="bold">toolenviroment</emphasis>. This toolenviroment
            is managed by the tool with internal models. When the tool implements a domain at the
            OpenEngSB, it knows which domainmodels are linkable and can decide which ones can be
            connected with it´s toolenviroment. To participate in crossprogram linking, a tool must
            announce it´s participation at the OpenEngSB and declare the modelclasses of the domain
            it is able to use, inclusive the views it is able to use per domainmodel. At the
            OpenEngSB, for each view, one domainmodel is choosen to be used for the XLink process.
            The tool receives a <emphasis role="bold">XLinkTemplate</emphasis> with this and other
            informations (will be discussed below). After this registration, the tool is able to
            receive and open or to retrieve links to a modelobject. To manage such registrations for
            XLink at the OpenEngSB, a central registration component, called <emphasis role="bold"
                >xlink-register</emphasis>, is established at the server. It manages the
            registration of tools for XLink. </para>
        <para>The essential part of crossmodel linking at the OpenEngSB is done by <emphasis
                role="bold">transformation</emphasis> between domainmodels. This tasks are fulfilled
            by the <link xlink:href="#contributor.ekb">engineering knowledge base</link> (ekb). A
            modelobject of a source-model is transformed to a modelojbect of a destination-model.
            How the transformation between the various models is done, is explained <link
                xlink:href="#xlink.openengsb.model.transformation">here</link>. The first required
            inputs to calculate such a transformation are, the source-model, its version and the
            modelobject, represented by it's identifier as shown above. The last two required inputs
            are the destination-model and it's version. The generated output is a set of
            modelobjects in the destination-model´s structure, but note that only the identifying
            fields of those modelobjects are set. This set represents <emphasis role="bold"
                >potential matches</emphasis>, that have to be checked against a local datasource by
            a local tool. If the potential matches correspond to some real local datapoints a match
            was found and a link across domains and across tools was made. It may occur that no
            corresponding datapoint can be found and linking fails. Depending on the quality of the
            transformation, the quality of the structured data and the degree of semantical relation
            a match is more likely to be found, or not. For example, crossproject linking may
            technically be realised but wont be very effective since the different datasets may be
            not semantical related at all. It is also possible that there is no possible
            transformation between two models and no potential matches can be generated. Because of
            the different granularity and characteristics of identifiers, one modelobject of a model
            may be associated with multiple modelobjects of another model. <anchor
                xml:id="concept.graphic"/></para>
        <para>
            <mediaobject>
                <alt>XLink Concept</alt>
                <imageobject>
                    <imagedata fileref="graphics/LinkingConceptGraphic_V5.png" format="png"
                        width="400" align="center"/>
                </imageobject>
                <caption>
                    <para>XLink Concept</para>
                </caption>
            </mediaobject>
        </para>
    </section>
    <section xml:id="xlink.concept.detail">
        <title>Detailed Concept</title>
        <para>Actors want to share <emphasis role="bold">XLinks</emphasis> of modelobjects via
            channels like email, when they want to highlight points of interest for other actors.
            When an actor receives a link to a modelobject, he wants to view corresponding
            datapoints in his tools and datasets. To make those links easy to call from a wide range
            of programs, they are realized as URLs that points to a special OpenEngSB webpage. The
            identifier and metadata which links to the corresponding modelobject are added as a set
            of GET-Parameters. For example:
            <ns:programlisting><![CDATA[http://urlToRegistry.suff?identifier=someData&amp;metadata=someData]]>           </ns:programlisting>This
            webpage (called <emphasis role="bold">ToolChooserPage</emphasis>) is able to receive
            such http-requests and act on them. Since the dataset of a project is changed
            frequently, <emphasis role="bold">generated XLinks will expire after a few
                days</emphasis>. This predicates on the fact that possible matches of generated
            XLinks will be less likely the more the dataset has changed since the link's generation.
            Therefore XLinks are not to be used in wikis or documentation.</para>
        <para>Again the OpenEngSB must act as a central component to all tools and must therefore be
            providing a connection on this XLink-URL the whole time to enable linking. Tools may be
            up and running or not, they may connect and disconnect at any time. When an actor starts
            his client, his installed tools must notify the xlink-registry if they want to
            participate in linking. During a notification, the tool must provide it´s host´s IP
            (this will be explained later on) and a map of linkable models and views it is
            accepting. For every view of the tool, the xlink-registry chooses the most appropriate
            model (see the Registrationfunction <link xlink:href="#implementation.registration"
                >definition</link>). This means that for every view, the tool must adopt the
            identfier of a given domainmodel. To create valid XLinks, the tool also needs the
            ToolChooserPage-url and the correct OpenEngSB context of the Xlink. Most of this
            information will be returned to the tool via a <emphasis role="bold"
                >XLinkTemplate</emphasis>, containing the <emphasis role="bold">page-url</emphasis>,
            the <emphasis role="bold">map of views with their associated models</emphasis>, the
            ContextId keyname and some additional information for Local Switching (this will be
            explained later on). Note that the page-url is already prefilled with some mandatory
            metadata that does not change during the session. The transported map instructs the tool
            which models to use and expect for certain views. In this way a tool can fetch the data,
            necessary to identify a modelobject, dynamically by the instructions in the
            XLinkTemplate (see the attributes of the XLinkTemplate <link
                xlink:href="#implementation.xlinkemplate.attributes">implementation</link> and see
            how an XLinkTemplate is <link xlink:href="#implementation.xlinkemplate.prepareUseCase"
                >prepared</link> bevor transmission). The tool must construct valid XLink URLs by
            adding the modelclass and version of the given view, the current OpenEngSB context and
            the modelobject serialized with JSON, as GET parameters. When an actor clicks on a
            xlink-url, the ToolChooserPage identifies the local tools of the Host via the IP of the
            http-request (since every connector registered itself with it´s host´s IP). Here lies a
            limitation which will be addressed in future work <link
                xlink:href="http://issues.openengsb.org/jira/browse/OPENENGSB-2777">(see on
                Jira)</link>, currently it is only possible to call this registry-url without proxy,
            since this would change the IP of the http-request. Next the ToolChooserPage reads the
            information from this <emphasis role="bold">sourcelink</emphasis> and provides an
                <emphasis role="bold">user-interface</emphasis> which enables the actor to
            authenticate himself and to choose a view in which he wants to open corresponding
            datapoints in his dataset. The login is done via http-authentication rather than the
            standard login page of the OpenEngSB. In the user-interface, a preselection can be made
            by filtering the tools and views to which no transformation can be done. By determining
            the tool and view the actor also defines the <emphasis role="bold"
                >destination-model</emphasis>, because every tool´s view is associated with a model.
            This user-interface is realized as <emphasis role="bold">wicket page</emphasis>. After
            the actors selection, the given source modelobject is transformed into the
            destination-model´s structure. The ToolChooserPage calls up the connector of the
            selected tool and sends it the transformation results. Its up to the tool, how to open
            existing corresponding datapoints. As mentioned above the transformation results are
            only potential matches. It may happen that no corresponding datapoints can be found, in
            that case the actor must be informed. </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="graphics/sampleServlet_V2.png" format="png" width="400"
                        align="center"/>
                </imageobject>
                <caption>Example MockUp of Servlet</caption>
            </mediaobject>
        </para>
        <para><emphasis role="bold">Tools</emphasis> must be able to open the corresponding
            datapoint to a defined modelobject and to retrieve the corresponding modelobject to a
            defined datapoint. The retrieval of modelobject-links is a manually triggered action by
            the Actor. Every tool and their views must enable the actor to extract the XLink of a
            selected modelobject (see an <link
                xlink:href="#implementation.xlinkemplate.generateUsecase">example</link> how a XLink
            is created). The opening of a datapoint related to a given modelobject is an
            automatically triggered action by the registry. </para>
        <example>
            <title>An Example</title>
            <para><emphasis role="italic">For example, first the actor receives a modelobject-link
                    as an url via email, from a different actor, and clicks on it. He is forwarded
                    to the http-servlet. Next he will be asked to define the tool and view he wants
                    to open corresponding datapoints in, then the registry transforms the source
                    modelobject into the destination-model´s structure and last sends the results to
                    the tool, to trigger the opening of the corresponding datapoint. If no
                    corresponding datapoint can be found by the tool it must inform the actor that
                    linking failed.</emphasis></para>
        </example>
        <para>Note that this concept also enables the actor to <emphasis role="bold">switch
                locally</emphasis> between his installed tool. To support this, the XLinkTemplate
            contains a <emphasis role="bold">list of local, already registered, tools</emphasis> and
                <emphasis role="bold">two Keyfields</emphasis> that have to be used. There is also
            an event-function to Keep the list up to date. Details are explained in <link
                xlink:href="#concept.architecture.localJumps">this section</link>.</para>
    </section>
    <section xml:id="concept.sequence.actions">
        <title>Example Sequence of Actions with different Actors</title>
        <para>
            <orderedlist>
                <listitem>
                    <para>The actors Adam &amp; Eve start their clients, their tools register
                        themselfes, provide their IP, their available model/view combinations and
                        get a XLinkTemplate assigned, which contain the servlet-url, information
                        about which model to use for which view and additional data for Local
                        Switching (which is not used here).</para>
                    <para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="graphics/StepOne.png" format="png" 
                                    width="400" align="center"/>
                            </imageobject>
                            <caption>Sequence of Actions: Step One</caption>
                        </mediaobject>
                    </para>
                </listitem>
                <listitem>
                    <para>Adam wants to mark a point of interest in his data for Eve and extracts
                        its XLink (wrapped as a http-link).</para>
                </listitem>
                <listitem>
                    <para>He sends the XLink and some meta information or request via email to Actor
                        Eve.</para>
                    <para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="graphics/StepTwoToThree.png" format="png" 
                                    width="400" align="center"/>
                            </imageobject>
                            <caption>Sequence of Actions: Step Two to Three</caption>
                        </mediaobject>
                    </para>
                </listitem>
                <listitem>
                    <para>Actor Eve clicks on the link, the ToolChooserPage is opened in her
                        browser.</para>
                </listitem>
                <listitem>
                    <para>Eve has to authenticate herself.</para>
                </listitem>
                <listitem>
                    <para>A list of all installed tools and views is opened. For each view there is
                        information displayed, if a transformation to destination-model can be done,
                        or not.</para>
                </listitem>
                <listitem>
                    <para>Actor Eve chooses one view.</para>
                    <para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="graphics/StepFourToSeven.png" format="png" 
                                    width="400" align="center"/>
                            </imageobject>
                            <caption>Sequence of Actions: Step Four to Seven</caption>
                        </mediaobject>
                    </para>
                </listitem>
                <listitem>
                    <para>The sourcelink is transformed by the mapper, potential matches are
                        created.</para>
                </listitem>
                <listitem>
                    <para>The potential matches are now transfered to the tool selected by
                        Eve.</para>
                </listitem>
                <listitem>
                    <para>This tool checks, if there are any corresponding local
                        modelobjects.</para>
                </listitem>
                <listitem>
                    <para>If one or more local modelobjects are found, a matching was made and they
                        are displayed in the selected view.</para>
                    <para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="graphics/StepEightToEleven.png" format="png" 
                                    width="400" align="center"/>
                            </imageobject>
                            <caption>Sequence of Actions: Step Eight to Eleven</caption>
                        </mediaobject>
                    </para>
                </listitem>
            </orderedlist>
        </para>
    </section>
    <section xml:id="concept.architecture.localJumps">
        <title>XLink for Local Switching</title>
        <ns:para>If an actor wants to use XLink only to switch between different tools on his local
            machine, it is refeered to as <emphasis role="bold">Local Switching</emphasis>.
            According to the sequence of actions above, the actor would have to extract an XLink
            from his currently active tool, execute that XLink in a Browser and select the tool he
            wants to switch to, in the wicket page. To make this easier, XLink offers a shortcut for
            local switching. This section describes how tools can implement this shortcut and how it
            benefits to it's users. Note that local switching must only be supported by the outgoing
            tool, even though it may not be possible to switch back, if the target tool doesn´t
            support it.</ns:para>
        <ns:para>To increase the Usability, the tool has to be able to reduce the nessecary
            interaction by retrieving the information about other installed tools by itself. And by
            sending an http-request to the ToolChooserPage that directly fires the transformation
            without opening the wicket page in a browser. The list of other local installed tools
            and the information about their ConnectorId and ViewIds are transfered via the
            XLinkTemplate during the registration. This list of tools is updated with an Event
            Method (see the definition <link xlink:href="#implementation.localswitch.information"
                >here</link>).</ns:para>
        <ns:para>To establish a http connection to the wicket page, the user must authenticate.
            Therefore the tool must ask the user to input the credentials, if unknown to the tool.
            In order to make the links useable for Local Switching they only require some extra
            information, so that they can skip the ToolChooserPage for theusers's input. In the
            wicket page the user chooses the destination tool and the destination view, since this
            information is now locally available, the tool can enable the actor to make this
            decision in the tool, without opening the browser. This information is now appended to
            the XLink (see an <link xlink:href="#implementation.localswitch.creation">example</link>
            how a XLink for Local Switching is created). If the XLink contains the ConnectorId
            (which represents the Tool) and the ViewId, the opening of the wicket page is skipped
            and the transformation is started immediately, just a status code 200 is returned. Note
            that the registry may return an http authentication request first. In this case the tool
            must authenticate itself with the http-authentication header and the actor´s credentials
            before the transformation is started.</ns:para>
        <ns:para>Tools that support Local Switching, enable the actor to trigger the transformation
            of datapoints, without leaving the tool during selection of the destination tool. The
            process was reduced by the intermediate step of opening the browser and using the
            http-servlet. </ns:para>
        <ns:para>Since the identification of the Host is done, like in the wicket page, via the IP,
            the same Proxy limitations appliy here <link
                xlink:href="http://issues.openengsb.org/jira/browse/OPENENGSB-2777">(see on
                Jira)</link>, because a Proxy would change the IP of the http-request.</ns:para>
    </section>
    <section xml:id="concept.sequence.localJumps.actions">
        <title>Example Sequence of Actions with local Tools (Local Switching)</title>
        <para>
            <orderedlist>
                <listitem>
                    <para>The actors Adam &amp; Eve start their clients, their tools register
                        themselfes, provide their IP, their available model/view combinations and
                        get a XLinkTemplate assigned, which contain the ToolChooserPage url,
                        information about which domainmodel to use for which view, a list of local,
                        already registered, tools, the ConnectorId and the keyname of the
                        ViewId.</para>
                </listitem>
                <listitem>
                    <para>During his work, Adam installes a new Tool that is integrated in OpenEngSB
                        and participates in XLinking. The list of installed tools is updated at each
                        local connector.</para>
                </listitem>
                <listitem>
                    <para>Adam works in Tool A on a bugfix and wants to view the related datapoint
                        to the Bug, in Tool B.</para>
                </listitem>
                <listitem>
                    <para>Tool A supports Adam to easily switch locally between tools, Adam can
                        select his point of interest in Tool A and chose to switch to Tool B.</para>
                </listitem>
                <listitem>
                    <para>Tool A creates a valid XLink for the selected datapoint and adds the
                        ConnectorId and ViewId of Tool B, which have been choosen by Adam.</para>
                </listitem>
                <listitem>
                    <para>Tool A calls the created XLink. The ToolChooserPage responses with a
                        http-authentication request, Adam is asked to authenticate himself by the
                        tool. </para>
                </listitem>
                <listitem>
                    <para>Now the XLink is accepted by the registry, since it contains the
                        ConnectorId and ViewId, the registry does not respond with the a wicket page
                        but with Status Code 200. The transformation is called automatically.</para>
                </listitem>
                <listitem>
                    <para>The sourcelink is transformed by the mapper, potential matches are
                        created.</para>
                </listitem>
                <listitem>
                    <para>The potential matches are now transfered to Tool B.</para>
                </listitem>
                <listitem>
                    <para>Tool B checks, if there are any corresponding local modelobjects.</para>
                </listitem>
                <listitem>
                    <para>If one or more local modelobjects are found, a matching was made and they
                        are displayed in the selected view.</para>
                </listitem>
            </orderedlist>
        </para>
    </section>
    <section xml:id="concept.failover">
        <title>Failover Actions</title>
        <para>If one of the following situations occur, the user must be informed that crossprogram
            linking has failed and the process is stopped. Other fallback options are future matter.<itemizedlist>
                <listitem>
                    <para>No match was found.</para>
                </listitem>
                <listitem>
                    <para>The user has not the rights too view the associated files of the
                        result.</para>
                </listitem>
                <listitem>
                    <para>Matches where found, but the user has not the needed files to view them
                        and the files are also not online available. </para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section xml:id="concept.registry.functions">
        <title>XLink - OpenEngSB Function Summary</title>
        <ns:para><emphasis role="bold">Nessecary Functions:</emphasis></ns:para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Defines and manages the domains, their models and the identifiers of the
                        domainmodels.</para>
                </listitem>
                <listitem>
                    <para>Enables registration and deregistration to XLink and associates views of
                        tools with domainmodels during the registration of tools, e.g. returns them
                        a XLinkTemplate.</para>
                </listitem>
                <listitem>
                    <para>Contains the mapper entity which creates transformations between
                        modelobjects from different models. To calculate a mapping, the mapper needs
                        five inputs, the source modelobject, it´s source-model, it's
                        source-modelVersion, the destination-model and the destination-modelVersion.
                        Information about the first three is transported via the http-link, the
                        destination-model and it's version are manually chosen by the user. The
                        modelojbect is transformed into a set of potential matches in the
                        destination-model's format.</para>
                </listitem>
                <listitem>
                    <para>An user-interface, which identifies the host´s tools via the IP of an
                        incoming http-request and reads the containing sourcelink. Next it enables
                        the actor to choose the destination view. This user-interface is realized as
                        a wicket page. Tasks of this page are, to authenticate the user, to display
                        all tools and views installed at the actor´s client and to give feedback if
                        a potential link may be established. </para>
                </listitem>
                <listitem>
                    <para>Call tools and sends them the transformed links.</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section xml:id="concept.tool.functions">
        <title>Tool Function Summary</title>
        <ns:para><emphasis role="bold">Nessecary Functions:</emphasis></ns:para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Registeres at startup, provides it´s IP and receives a XLinkTemplate. The
                        received XLinkTemplate defines which model is to be used for which view and
                        determines how a valid XLink is created.</para>
                </listitem>
                <listitem>
                    <para>Must enable the user to extract a XLink to a selected modelobject.</para>
                </listitem>
                <listitem>
                    <para>Must provide an interface to open one or more potential modelobjects,
                        after the user selected a view in the wicket page. </para>
                </listitem>
                <listitem>
                    <para>Must inform the actor about a failure during linking.</para>
                </listitem>
                <listitem>
                    <para>Must determine fallback actions if the actor wants to extract XLinks to
                        content that is not covered by the provided identifier.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para><emphasis role="bold">Optional Functions:</emphasis></para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Support local jumping between tool via XLink. Can be realized with the
                        described methods <link xlink:href="#concept.architecture.localJumps"
                            >here</link>.</para>
                </listitem>
                <listitem>
                    <para>Enable the actor to reload central available data (for instance, data
                        stored in SCMs), if the actors does not hold the relevant files to view
                        matches.</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
</chapter>

<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter version="5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd   http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd   http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd"
  xml:id="user.security" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ns="http://docbook.org/ns/docbook">

  <title>Security in the OpenEngSB</title>

  <section xml:id="user.security.usermanagement">
    <title>Usermanagement</title>

    <para>The OpenEngSB has a central user management service, which can be used for example by an user interface.
      The service is designed to manage your users. You can create new user and save them to the persistence or retrieve,
      update and delete them. </para>

    <para>The user management needs a back-end database. The provided default implementation uses JPA and an h2-database</para>

    <para>
      The interface of the
      <link xlink:href="${github}/components/api/src/main/java/org/openengsb/core/api/security/UserDataManager.java">User manager</link>
      supports basic CRUD mechanisms (create, retrieve, update, delete). A user is identified by a unique username that cannot be changed.
    </para>
  </section>

  <section xml:id="user.security.access">
    <title>Access control</title>

    <para>Access control is done on the service level. Core-services and connector-instances are all published as
      OSGi-services. Other services and components always reference these service instances. We use AOP to provide
      security for these services. The openengsb.core.security-bundle publishes a service that serves as
      a method-interceptor. When it is attached to a service every method call on the service is preceded with an
      authorization-check. </para>

    <para>A reference to the method-interceptor can be obtained via blueprint using this line
      <programlisting language="xml"><![CDATA[<reference id="securityInterceptor" interface="org.aopalliance.intercept.MethodInterceptor" />]]></programlisting>
      In order to attach it to an existing bean, one has to create a ProxyFactoryBean:
      <programlisting language="xml"><![CDATA[<bean id="secureServiceManager" class="org.openengsb.core.common.ProxyFactoryBean">
  <property name="proxyInterfaces">
    <value>other.ServiceInterface</value>
  </property>
  <property name="advices">
    <list>
      <value>securityInterceptor</value>
    </list>
  </property>
  <property name="target" ref="<realBean>" />
</bean>]]></programlisting>
      When registering a service in code rather than in a spring context.xml this can be done as seen in the
	  <link xlink:href="${github}/components/services/src/main/java/org/openengsb/core/services/internal/ConnectorManagerImpl.java">
        AbstractServiceManager</link>
      <programlisting language="java"><![CDATA[
//
// ...
//
ProxyFactory factory = new ProxyFactory(serviceObject);
factory.addAdvice(securityInterceptor);
OpenEngSBService securedService = (OpenEngSBService) factory.getProxy();]]></programlisting>
    </para>

    <para>The decision about the allowing the user access to a service as made by looking at the services instanceId.
      Therefore, all services that are to be placed under this access control, must implement
      <link xlink:href="${github}/core/api/src/main/java/org/openengsb/core/api/OpenEngSBService.java">
        OpenEngSBservice</link>, and make sure the instanceId is unique enough to ensure security.
      You may want to derive your service-class from
      <link xlink:href="${github}/core/common/src/main/java/org/openengsb/core/common/AbstractOpenEngSBService.java">
        AbstractOpenEngSBService</link>.</para>
    <para>The persistence of the security-bundle manages a set of GrantedAuthorities (Roles) for each instanceId.
      There is one exception: Users with "ROLE_ADMIN" are always granted access.</para>
  </section>

  <section>
    <title>Authentication</title>
    <para>This chapter describes how to deal with security in internal bundles and client projects</para>
    <para>The util-class org.openengsb.core.services.SecurityContext provides several methods for handling
      authentication</para>
  </section>

</chapter>


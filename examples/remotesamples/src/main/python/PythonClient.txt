====
    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
====

To test the OPENENGSB jms implementation with Python download Stomppy from http://code.google.com/p/stomppy/.
It comes with a cli.py script used to send JMS Messages via stomp.

Start the Stomppy client with Host and PORT parameters. Default should be:
python cli.py -H localhost -P 6550.

--------- Receiving Method Calls ---------
To subscribe to a specific Queue call "subscribe /queue/<DomainName>_method_send". For example:
"subscribe /queue/ExampleDomain_method_send".

When a request is sent via the above queue you can answer via sending a message to the return queue:
"send /queue/ExampleDomain_method_return {"type":"Return","message":"abcde"}". Please consult the JMS Connector documentation
for information about the message format.

The return message will then be mapped to the return value of the request method and ultimately shown in the UI.

--------- Raising Events ---------
As Stomppy has no builtin possibility of setting headers in cli Raising Events fails, because the ContextId cannot be set.
The following commands are only here for reference, bit will NOT work.

To raise an Event call "send /queue/<DomainName>_event_send". For example:

"send /queue/ExampleDomain_event_send {"type":"org.openengsb.domain.example.event.LogEvent","event":{"name":"Name", "message":"Message", "level":"INFO"}}"

The return can then be read via "subscribe /queue/ExampleDomain_event_return".

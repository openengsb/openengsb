/**
 * Copyright 2010 OpenEngSB Division, Vienna University of Technology
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openengsb.core.workflow.internal;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.drools.KnowledgeBase;
import org.drools.event.process.DefaultProcessEventListener;
import org.drools.event.process.ProcessCompletedEvent;
import org.drools.runtime.StatefulKnowledgeSession;
import org.drools.runtime.process.ProcessInstance;
import org.drools.runtime.rule.FactHandle;
import org.openengsb.core.common.Domain;
import org.openengsb.core.common.Event;
import org.openengsb.core.common.context.ContextCurrentService;
import org.openengsb.core.common.workflow.RuleBaseException;
import org.openengsb.core.common.workflow.RuleManager;
import org.openengsb.core.common.workflow.WorkflowException;
import org.openengsb.core.common.workflow.WorkflowService;
import org.openengsb.core.common.workflow.model.ProcessBag;
import org.openengsb.core.common.workflow.model.RuleBaseElementId;
import org.openengsb.core.common.workflow.model.RuleBaseElementType;
import org.osgi.framework.BundleContext;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.framework.ServiceEvent;
import org.osgi.framework.ServiceListener;
import org.osgi.framework.ServiceReference;
import org.springframework.osgi.context.BundleContextAware;

public class WorkflowServiceImpl implements WorkflowService, BundleContextAware, ServiceListener {

    private static final String START_FLOW_CONSEQUENCE_LINE = "  flowHelper.startFlow(\"%s\");\n";

    private Log log = LogFactory.getLog(WorkflowServiceImpl.class);

    private static final String FLOW_TRIGGER_RULE_TEMPLATE =
        "## This rule has been autogenerated by the WorkflowService\n" + "when\n" + "  Event ( name == \"%s\" )\n"
                + "then\n";

    private RuleManager rulemanager;
    private ContextCurrentService currentContextService;
    private BundleContext bundleContext;

    private Map<String, Object> services = new HashMap<String, Object>();

    private Map<String, StatefulKnowledgeSession> sessions = new HashMap<String, StatefulKnowledgeSession>();

    private long timeout = 10000;

    @Override
    public void processEvent(Event event) throws WorkflowException {
        StatefulKnowledgeSession session = getSessionForCurrentContext();
        FactHandle factHandle = session.insert(event);
        session.fireAllRules();
        for (ProcessInstance p : session.getProcessInstances()) {
            p.signalEvent(event.getType(), event);
        }
        session.retract(factHandle);
    }

    @Override
    public long startFlow(String processId) throws WorkflowException {
        return this.startFlow(processId, null);
    }
    
    @Override
    public long startFlow(String processId, Map<String, Object> parameterMap) throws WorkflowException {
        StatefulKnowledgeSession session = getSessionForCurrentContext();
        ProcessInstance processInstance;
        ProcessBag processBag;
        
        if(parameterMap == null)
            parameterMap = new HashMap<String, Object>();
            
        if(!parameterMap.containsKey("processBag")) {
            processBag = new ProcessBag();
            parameterMap.put("processBag", processBag);
        }
        else 
            processBag = (ProcessBag)parameterMap.get("processBag");
                    
        processInstance = session.startProcess(processId, parameterMap);
        processBag.setProcessId(String.valueOf(processInstance.getId()));
        
        return processInstance.getId();
    }

    @Override
    public void registerFlowTriggerEvent(Event event, String... flowIds) throws WorkflowException {
        String eventName = event.getName();
        String ruleName = String.format("_generated_ trigger %s on %s", Arrays.asList(flowIds), eventName);
        StringBuffer ruleCode = generateFlowTriggerRule(eventName, flowIds);
        log.info("adding new rule with id: " + ruleName);
        try {
            rulemanager.add(new RuleBaseElementId(RuleBaseElementType.Rule, ruleName), ruleCode.toString());
        } catch (RuleBaseException e) {
            throw new WorkflowException(e);
        }
    }

    private StringBuffer generateFlowTriggerRule(String eventName, String... flowIds) {
        StringBuffer ruleCode = new StringBuffer();
        ruleCode.append(String.format(FLOW_TRIGGER_RULE_TEMPLATE, eventName));
        for (String flowId : flowIds) {
            ruleCode.append(String.format(START_FLOW_CONSEQUENCE_LINE, flowId));
        }
        return ruleCode;
    }

    public void waitForFlowToFinish(long id) throws InterruptedException, WorkflowException {
        StatefulKnowledgeSession session = getSessionForCurrentContext();
        synchronized (session) {
            while (session.getProcessInstance(id) != null) {
                session.wait(5000);
            }
        }
    }

    public Collection<Long> getRunningFlows() throws WorkflowException {
        Collection<ProcessInstance> processInstances = getSessionForCurrentContext().getProcessInstances();
        Collection<Long> result = new HashSet<Long>();
        for (ProcessInstance p : processInstances) {
            result.add(p.getId());
        }
        return result;
    }

    private StatefulKnowledgeSession getSessionForCurrentContext() throws WorkflowException {
        String currentContextId = currentContextService.getThreadLocalContext();
        if (currentContextId == null) {
            throw new IllegalStateException("contextID must not be null");
        }
        if (sessions.containsKey(currentContextId)) {
            return sessions.get(currentContextId);
        }
        StatefulKnowledgeSession session;
        try {
            session = createSession();
        } catch (RuleBaseException e) {
            throw new WorkflowException(e);
        }
        sessions.put(currentContextId, session);
        return session;
    }

    private Collection<String> findMissingGlobals() {
        Collection<String> globalsToProcess = new ArrayList<String>(rulemanager.listGlobals().keySet());
        globalsToProcess.remove("flowHelper");
        globalsToProcess.removeAll(services.keySet());

        return discoverNewGlobalValues(globalsToProcess);
    }

    private Collection<String> discoverNewGlobalValues(Collection<String> globalsToProcess) {
        for (Iterator<String> iterator = globalsToProcess.iterator(); iterator.hasNext();) {
            String g = iterator.next();
            if (findGlobal(g)) {
                iterator.remove();
            }
        }
        return globalsToProcess;
    }

    private boolean findGlobal(String name) {
        return findDomainGlobal(name) || findNonDomainGlobal(name);
    }

    private boolean findDomainGlobal(String name) {
        String clazz = Domain.class.getName();
        String filter = String.format("(&(openengsb.service.type=domain)(id=domain.%s))", name);
        ServiceReference ref = findGlobalReference(name, clazz, filter);
        if (ref == null) {
            return false;
        }
        Object service = bundleContext.getService(ref);
        services.put(name, service);
        return true;
    }

    private ServiceReference findGlobalReference(String name, String clazz, String filter) {
        ServiceReference[] allServiceReferences;
        try {
            allServiceReferences = bundleContext.getAllServiceReferences(clazz, filter);
        } catch (InvalidSyntaxException e) {
            throw new IllegalStateException(e);
        }
        if (allServiceReferences == null) {
            return null;
        }
        if (allServiceReferences.length != 1) {
            throw new IllegalStateException(String.format("found more than one match for \"%s\".", name));
        }
        return allServiceReferences[0];
    }

    private boolean findNonDomainGlobal(String name) {
        String clazz = rulemanager.listGlobals().get(name);
        String filter =
            String.format("(&(openengsb.service.type=workflow-service)(openengsb.workflow.globalid=%s))", name);
        ServiceReference ref = findGlobalReference(name, clazz, filter);
        if (ref == null) {
            return false;
        }
        Object service = bundleContext.getService(ref);
        services.put(name, service);
        return true;
    }

    protected StatefulKnowledgeSession createSession() throws RuleBaseException, WorkflowException {
        KnowledgeBase rb = rulemanager.getRulebase();
        log.debug("retrieved rulebase: " + rb + "from source " + rulemanager);
        final StatefulKnowledgeSession session = rb.newStatefulKnowledgeSession();
        log.debug("session started");
        populateGlobals(session);
        log.debug("globals have been set");
        session.addEventListener(new DefaultProcessEventListener() {
            @Override
            public void afterProcessCompleted(ProcessCompletedEvent event) {
                synchronized (session) {
                    session.notifyAll();
                }
            }
        });
        return session;
    }

    private void populateGlobals(StatefulKnowledgeSession session) throws WorkflowException {
        if (rulemanager.listGlobals().containsKey("flowHelper")) {
            session.setGlobal("flowHelper", new DroolsFlowHelperImpl(session));
        } else {
            throw new RuntimeException("global was added but it was not found...");
        }

        Collection<String> missingGlobals = findMissingGlobals();
        if (!missingGlobals.isEmpty()) {
            waitForGlobals(missingGlobals);
            if (!missingGlobals.isEmpty()) {
                throw new WorkflowException("there are unassigned globals, maybe some service is missing "
                        + missingGlobals);
            }
        }
        for (Entry<String, Object> entry : services.entrySet()) {
            session.setGlobal(entry.getKey(), entry.getValue());
        }
    }

    private void waitForGlobals(Collection<String> missingGlobals) throws WorkflowException {
        boolean hasChanged = true;
        while (hasChanged && !missingGlobals.isEmpty()) {
            try {
                synchronized (services) {
                    services.wait(timeout);
                }
            } catch (InterruptedException e) {
                throw new WorkflowException(e);
            }
            hasChanged = missingGlobals.removeAll(services.keySet());
        }
    }

    @Override
    public void serviceChanged(ServiceEvent event) {
        if (event.getType() == ServiceEvent.REGISTERED) {
            ServiceReference serviceReference = event.getServiceReference();
            if (serviceReference.getProperty("openengsb.service.type").equals("domain")) {
                String id = (String) serviceReference.getProperty("id");
                String name = id.replaceFirst("domain.", "");
                Domain service = (Domain) bundleContext.getService(serviceReference);
                synchronized (services) {
                    services.put(name, service);
                    services.notify();
                }
            } else if (serviceReference.getProperty("openengsb.service.type").equals("workflow-service")) {
                String name = (String) serviceReference.getProperty("openengsb.workflow.globalid");
                Object service = bundleContext.getService(serviceReference);
                synchronized (services) {
                    services.put(name, service);
                    services.notify();
                }
            }
        }

    }

    public void setCurrentContextService(ContextCurrentService currentContextService) {
        this.currentContextService = currentContextService;
    }

    public void setServices(Map<String, Object> services) {
        this.services = services;
    }

    @Override
    public void setBundleContext(BundleContext bundleContext) {
        this.bundleContext = bundleContext;
    }

    public void setRulemanager(RuleManager rulemanager) {
        this.rulemanager = rulemanager;
    }

    public void setTimeout(long timeout) {
        this.timeout = timeout;
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="howto.remote" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>HowTo - Interact with the OPENENGSB Remotely</title>

  <section xml:id="howto.remote.jms">
    <title>Using JMS proxying</title>
    <para>The current JMS Connector allows for internal method calls being redirected via JMS as well as internal
      services being called.</para>
    <para>For resources regarding JMS please take a look at the according <link xlink:href="http://en.wikipedia.org/wiki/Java_Message_Service">Wikipedia Page</link> and for specific language bindings take a look at <link xlink:href="http://activemq.apache.org/connectivity.html">ActiveMQ</link></para>
    <section>
      <title>Proxying internal Connector calls</title>
      <para>Whenever now a method is sent through the JMS Port the call is marshalled and sent via JMS to a queue named "receive"". 
        The marshalling is done via JSON. The mapping has the parameters methodName, args, classes, metadata and potentially answer 
        and callId. methodName gives the name of the method to call. Args are the serialised parameters of the method. classes are 
        the types of the arguments. This way it is easy to unmarshall the args into the appropriate classes. metadata is a simple Map
        which stores key value pairs. answer can simply be yes or no and denotes if the methodcall wants an answer to the call. callId
        gives the return queue the caller will listen to for an answer.
      </para>
      <para>An answer can have the type, arg, className and metaData properties. type can be Object, Exception or Void. arg is the serialised
        form of the return argument. className is the runtime class of the arg for deserialisation. metadata is a simple key value store.
      </para>
      <section>
        <title>HowTo call an external service via proxies</title>
        <para>This section will give a short introduction how to instantiate a proxy and call an external connector</para>
        <para>First you have to go to the TestClient to instantiate a new Proxy. Select the Domain you want to have proxied
          and click New Proxy for that Domain.</para>
        <mediaobject>
          <imageobject>
            <imagedata id="testclient" fileref="graphics/testclient.png"
              format="png" width="300" align="center" />
          </imageobject>
          <caption>Testclient new proxy link</caption>
        </mediaobject>
        <para>Then you have to set the correct values for the proxy properties. The Service Id is a unique value that
          identifies the proxy in the OPENENGSB system. The Port Id defines to Port to be used for sending the request.
          "jms-json" is a currently supported Port that sends the request via a json encoded JMS message. The destination
          describes the endpoint the message should be sent to. When using jms-json the domain and port of the JMS provider
          have to be set. When calling a remote connector the unique id of the remote service or connector has to be provided. 
          This way the remote service can identify, load and call a certain service.
          If the call is not intended to go to another OPENENGSB, or the external service needs no identification of the service
          to call the remote service id can be ommited.</para>
        <mediaobject>
          <imageobject>
            <imagedata id="create-proxy" fileref="graphics/create-proxy.png"
              format="png" width="400" align="center" />
          </imageobject>
          <caption>Create Proxy</caption>
        </mediaobject>
        <para>After saving the proxy you should be able to test it via the TestClient page. Following is an example of
          a call:</para>
        <code>{"classes":["java.lang.String", "java.lang.Integer","org.openengsb.core.ports.jms.JMSPortTest$TestClass"], 
          "methodName":"method","args":["123",5,{"test":"test"}], "metaData":{"test":"test"}
        </code>
        <mediaobject>
          <imageobject>
            <imagedata id="call-proxy" fileref="graphics/call-proxy.png"
              format="png" width="400" align="center" />
          </imageobject>
          <caption>Test a proxy</caption>
        </mediaobject>
        <para>When proxying connector calls you have to provide an answer to every call, as the system blocks until it gets an answer.
          You have to send a JSON message containing a type string parameter, which can be Object, Exception or Void depending on the 
          return argument of the method, arg where you simply serialise the Return Object, so it can be deserialised into the correct 
          object later and className which gives the exact class that has to be used for deserialisation. The request contains a 
          parameter callId which is the name of the queue the answer has to be sent to.</para>
        <code>{"type":"Object","className":"org.openengsb.core.ports.jms.JMSPortTest$TestClass",
          "metaData":{"test":"test"},"arg":{"test":"test"}}</code>
        <para>Whenever a call to this proxy is then made a new JMS message will be sent to the "receive" queue on the 
          destination you entered. The exact make up of the message was already described. When implementing an external connector
          it is best to test the call you want to receive first via the TestClient, so you get the exact message that you will
          have to work with.</para>
      </section>
    </section>
    <section>
      <title>Calling internal Services</title>
      <para>To call an internal Service send a methodcall as described before to the "receive" queue on the server you want to call.
        The service works exactly as defined before.</para>
      <para>By default a JMS Broker is started on port 6549.</para>
    </section>
    <section>
      <title>Examples</title>
      <section>
        <title>Connect With Python</title>
        <para>To test the OPENENGSB JMS implementation with Python please follow the
          <link xlink:href="${github}/docs/examples/connectors/python/PythonClient.txt">instructions</link>
        </para>
        <para>The example can be downloaded <link xlink:href="${repos.example}-python-connector.zip">here</link></para>
      </section>
      <section xml:id="developer.plugins.csharp">
        <title>Connect With CSharp</title>
        <para>The CSharp connector is written on basis of the Apache ActiveMQ JMS connector and with help of the Spring
          JmsTemplate. The code is checked into the repository and could be found in <literal>nonjava/csharp</literal>.
          There an EngSB.sln file. This project file has been developed with SharpDevelop 3, but is also tested with
          VisualStudio 2008 CSharp Express Edition with the .Net Framework 3.5.</para>
        <para>The example can be downloaded <link xlink:href="${repos.example}-csharp-connector.zip">here</link></para>
      </section>
      <section xml:id="developer.plugins.perl">
        <title>Connect With Perl</title>
        <para>As shown in this example you can connect to the OpenEngSB in a similar way as with Python or CSharp.</para>
        <para>The example can be downloaded <link xlink:href="${repos.example}-perl-connector.zip">here</link></para>
      </section>
    </section>
  </section>
</chapter>

